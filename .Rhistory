## NATE: (MT-, MS-, MA-, MV-), ML-, MI-, MF-, MY-, MK-
## matching the first two Nt a.a. sequence to protein, remove the 3534 prs
## with no matching sequence in uniprot
process.data <- as.data.frame(apply(process.data, 2, as.numeric))
process.data$`a.a.seq_trunc` <- a.a.seq_trunc
rownames(process.data) <- rownames(sub.data)
process.data <- process.data[!isEmpty(process.data$a.a.seq_trunc),]
a.a.seq_trunc.rmNULL <- process.data$a.a.seq_trunc
process.data$a.a.seq_trunc <- NULL
## normalize T&N, subgroup I,II,III by dividing by mean
process.data <- t(as.matrix(process.data))
process.data <- as.data.frame(process.data)
divide_by_mean <- function(nv){
## divide the value by its mean, NAs removed
## return the normalized nv, rt
rt <- nv/mean(nv, na.rm=TRUE)
return(rt)
}
process.data <- apply(process.data,2,divide_by_mean)
process.data <- as.data.frame(process.data)
## split genes based on substrates of NAT catalyst NatA, NatB, NatC/E
## create three character vector to store the protein IDs of substrates of
## NatA, NatB, NatC/E respectively
sort_substrate <- function(df, list, Nat){
## take in process.data df, list of proteinID respective Nt sequence
## and character string of selected catalyst name c("NatA", "NatB", "NatC/E")
## as arguments
## return a subset of df, of which the proteins are the substrates
## of given Nat catalyst
sub_Nat <- logical(ncol(df))
if (Nat == "NatA"){
target <- c("MA","MS","MT","MV","MC","MG")
for (i in 1:length(list)){
if (length(intersect(list[[i]], target)) != 0){sub_Nat[i] <- TRUE}
}
}
else if (Nat == "NatB"){
target <- c("MD","ME","MN","MQ")
for (i in 1:length(list)){
if (length(intersect(list[[i]], target)) != 0){sub_Nat[i] <- TRUE}
}
}
else if (Nat == "NatC/E"){
target <- c("ML","MI","MF","MY","MK")
for (i in 1:length(list)){
if (length(intersect(list[[i]], target)) != 0){sub_Nat[i] <- TRUE}
}
}
else {warning("The Nat name input format is incorrect!")}
return(df[, sub_Nat])
}
NatA_sub <- sort_substrate(process.data, a.a.seq_trunc.rmNULL, "NatA")
NatB_sub <- sort_substrate(process.data, a.a.seq_trunc.rmNULL, "NatB")
NatCE_sub <- sort_substrate(process.data, a.a.seq_trunc.rmNULL, "NatC/E")
## split N/T
NatA_sub_N <- NatA_sub[1:98,]
NatA_sub_T <- NatA_sub[99:199,]
NatB_sub_N <- NatB_sub[1:98,]
NatB_sub_T <- NatB_sub[99:199,]
NatCE_sub_N <- NatCE_sub[1:98,]
NatCE_sub_T <- NatCE_sub[99:199,]
## compensate NAs with min+/- 10%, in N & T respectively
compen <- function(nv){
## take in a numeric vector with missing values as argument
## compensate NAs with random number within the range of min+/- 10%
na <- !complete.cases(nv)
min <- min(nv, na.rm = TRUE)
nv[na] <- runif(sum(na), min-min/10, min+min/10)
return(nv)
}
NatA_sub_N <- as.data.frame(t(apply(NatA_sub_N, 2, compen)))
NatA_sub_T <- as.data.frame(t(apply(NatA_sub_T, 2, compen)))
NatB_sub_N <- as.data.frame(t(apply(NatB_sub_N, 2, compen)))
NatB_sub_T <- as.data.frame(t(apply(NatB_sub_T, 2, compen)))
NatCE_sub_N <- as.data.frame(t(apply(NatCE_sub_N, 2, compen)))
NatCE_sub_T <- as.data.frame(t(apply(NatCE_sub_T, 2, compen)))
## split subgroup I, II, III
meta.data.N <- as.data.frame(meta.data[1:98,])
meta.data.T <- as.data.frame(meta.data[99:199,])
library(phylotools)
aa_whole_df <- read.fasta(file = "uniprot_sprot_varsplic.fasta", clean_name = FALSE)
library(stringr)
library(stringi)
OrganismName <- paste(word(aa_whole_df$seq.name, -4), word(aa_whole_df$seq.name, -3))
GeneName <- word(aa_whole_df$seq.name, -1)
ProteinName <- str_extract(aa_whole_df$seq.name, "\\|.+?\\|")
ProteinName <- substr(ProteinName, 2, nchar(ProteinName)-1)
aa_whole_df$`OrganismName` <- substring(OrganismName,4)
aa_whole_df$`GeneName` <- substring(GeneName,4)
aa_whole_df$`ProteinName` <- ProteinName
aa_HS_df <- aa_whole_df[aa_whole_df$OrganismName=="Homo sapiens",]
##change factor to character vector
sub.data$Gene.names <- as.character(sub.data$Gene.names)
sub.data$Protein.IDs <- as.character(sub.data$Protein.IDs)
load("C:/Users/Aaron Xing/Desktop/NCPS/HCC/HBV-HCC_I/HCC.RData")
library(phylotools)
aa_whole_df <- read.fasta(file = "uniprot_sprot_varsplic.fasta", clean_name = FALSE)
library(stringr)
library(stringi)
OrganismName <- paste(word(aa_whole_df$seq.name, -4), word(aa_whole_df$seq.name, -3))
GeneName <- word(aa_whole_df$seq.name, -1)
ProteinName <- str_extract(aa_whole_df$seq.name, "\\|.+?\\|")
ProteinName <- substr(ProteinName, 2, nchar(ProteinName)-1)
aa_whole_df$`OrganismName` <- substring(OrganismName,4)
aa_whole_df$`GeneName` <- substring(GeneName,4)
aa_whole_df$`ProteinName` <- ProteinName
aa_HS_df <- aa_whole_df[aa_whole_df$OrganismName=="Homo sapiens",]
##change factor to character vector
sub.data$Gene.names <- as.character(sub.data$Gene.names)
sub.data$Protein.IDs <- as.character(sub.data$Protein.IDs)
library(phylotools)
aa_whole_df <- read.fasta(file = "uniprot_sprot_varsplic.fasta", clean_name = FALSE)
library(stringr)
library(stringi)
OrganismName <- paste(word(aa_whole_df$seq.name, -4), word(aa_whole_df$seq.name, -3))
GeneName <- word(aa_whole_df$seq.name, -1)
ProteinName <- str_extract(aa_whole_df$seq.name, "\\|.+?\\|")
ProteinName <- substr(ProteinName, 2, nchar(ProteinName)-1)
aa_whole_df$`OrganismName` <- substring(OrganismName,4)
aa_whole_df$`GeneName` <- substring(GeneName,4)
aa_whole_df$`ProteinName` <- ProteinName
aa_HS_df <- aa_whole_df[aa_whole_df$OrganismName=="Homo sapiens",]
##change factor to character vector
sub.data$Gene.names <- as.character(sub.data$Gene.names)
sub.data$Protein.IDs <- as.character(sub.data$Protein.IDs)
library(phylotools)
aa_whole_df <- read.fasta(file = "uniprot_sprot_varsplic.fasta", clean_name = FALSE)
View(meta.data)
meta.data <- as.data.frame(meta.data)
meta.data.N <- meta.data[meta.data$type=="P",]
meta.data.T <- meta.data[meta.data$type=="T",]
sum(meta.data.N$stage=="S-I")
sum(meta.data.N$stage=="S-II")
sum(meta.data.N$stage=="S-III")
sum(meta.data.T$stage=="S-I")
sum(meta.data.T$stage=="S-II")
sum(meta.data.T$stage=="S-III")
library(swirl)
swirl()
head(pollution)
dim(pollution)
pollution$pm25
summary(pollution$pm25)
summary(ppm)
quantile(ppm)
boxplot(ppm, col = "blue")
boxplot(ppm, h = 12)
abline(h = 12)
hist(ppm, col = "green")
rug(ppm)
rug(high)
rug(low)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(h)
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd = 4)
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
play()
head(pollution$region)
nxt()
barplot(reg, col = "wheat", main="Number of Counties in Each Region")
boxplot(formula = pm25~region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region=="west")$ppm, col = "green")
hist(subset(pollution, region=="west")$pm25, col = "green")
with(pollution, plot(latitude, pm25))
abline(h= 12, lwd=2,lty=2)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5,4,2,1))
play()
?mar
?par
nxt()
west <- subset(pollution, region="west")
west <- subset(pollution, region=="west")
plot(west$latitude,west$pm25,main="west")
boxplot(west$latitude,west$pm25,main="west")
par(mfrow=c(1,2),mar=c(5,4,2,1))
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(eruptions, waiting)
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
state$region
table(state$region)
xyplot(Life.Exp~income|region,state, c(4,1))
xyplot(Life.Exp~Income|region,state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,mpg)
qplot(displ,hwy,data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = T)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
play()
dev.cur
dev.cur()
dev.off()
dev.list()
dev.cur()
nxt()
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone(ppb)",col.axis = "blue", col.lab = "red")
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)",col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = " Ozone and Wind in New York City")
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
play()
?pch
par("pch")
(?pch)
nxt()
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
play()
dev.off()
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
nxt()
may <- subset(airquality, Month = 5)
may <- subset(airquality, Month == 5)
play()
?pch
pch = 0:18
pch(0:18)
nxt()
with(may, points(Wind, Ozone), par(pch = 2, col = "blue"))
point(may$Wind, may$Ozone, col="blue", pch=17)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind)
points(notmay$Wind, notmay$Ozone, col="red",pch=8)
legend("topright", pch=c(17,8), col=("blue","red"),legend=("May","Other Months"))
legend("topright", pch=c(17,8), col=("blue","red"),legend=("May","Other Months"))
legend("topright", c(17,8), ("blue","red"), ("May","Other Months"))
legend("topright", c(17,8), c("blue","red"), c("May","Other Months"))
legend("topright", pch=c(17,8), col=c("blue","red"),legend=c("May","Other Months"))
abline(v=median(airquality$Wind, lty=2, lwd=2))
abline(v=median(airquality$Wind,lty=2,lwd=2))
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=)
mtext("Ozone and Weather in New York City", outer=TRUE)
setwd("C:/Users/Aaron Xing/Documents/Data science John Hopkins/Exploratory analysis")
file <- gzfile("exdata_data_household_power_consumption.gz")
df <- read.table(file)
df <- read.table(file, "r")
file <- gzfile("exdata_data_household_power_consumption.gz", "r")
?unzip
?unz
file <- gzfile("exdata_data_household_power_consumption.gz",open="r")
file <- gzfile("exdata_data_household_power_consumption.gz")
str(file)
readLines(file)
file <- unz("exdata_data_household_power_consumption", "household_power_consumption.txt", "r")
file <- unz("exdata_data_household_power_consumption.gz", "household_power_consumption.txt", "r")
file <- unz("exdata_data_household_power_consumption.txt.gz", "household_power_consumption.txt", "r")
file <- unz("exdata_data_household_power_consumption.zip", "household_power_consumption.txt", "r")
read.table(file, header = TRUE, sep = ";")
read.table(file)
class(file)
str(file)
readLines(file)
read.table("exdata_data_household_power_consumption.zip",header = TRUE,sep = ";")
unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt")
unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt")
read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"),header = TRUE, sep = ";")
df <- read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"),header = TRUE, sep = ";")
View(df)
df$Date[1]
?striptime
?strptime
strptime(df$Date[1])
strptime(df$Date[1],format = "%d-%m-%Y")
strptime(df$Date[1],format = "%d/%m/%Y")
strptime(df$Time[1],format = "%H:%M:%S")
?as.Date
as.Date(df$Time[1], format = "%H:%M:%S")
x <- paste(df$Date[1], df$Time[1])
strptime(x, format = "%d/%m/%Y %H:%M:%S")
str(strptime(x, format = "%d/%m/%Y %H:%M:%S"))
class(strptime(x, format = "%d/%m/%Y %H:%M:%S"))
setwd("C:/Users/Aaron Xing/ExData_Plotting1")
data <- read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"), header = TRUE, sep = ";")
View(data)
strptime(paste(data$Date,data$Time),format = "%d/%m/%Y %H:%M:%S")
strptime(paste(data$Date[1],data$Time[1]),format = "%d/%m/%Y %H:%M:%S")
strptime(paste(data$Date[1],data$Time[1]),format = "%d/%m/%Y %H:%M:%S")$mon
strptime(paste(data$Date[1],data$Time[1]),format = "%d/%m/%Y %H:%M:%S")$year
strptime(paste(data$Date[1],data$Time[1]),format = "%d/%m/%Y %H:%M:%S")$day
strptime(paste(data$Date[1],data$Time[1]),format = "%d/%m/%Y %H:%M:%S")$mday
strptime(paste(data$Date[40843],data$Time[40843]),format = "%d/%m/%Y %H:%M:%S")$mday
strptime(paste(data$Date[40843],data$Time[40843]),format = "%d/%m/%Y %H:%M:%S")$year
strptime(paste(data$Date[40843],data$Time[40843]),format = "%d/%m/%Y %H:%M:%S")$mon
data$Date-time <- strptime(paste(data$Date,data$Time), format = "%d/%m/%Y %H:%M:%S")
data$Date_time <- strptime(paste(data$Date,data$Time), format = "%d/%m/%Y %H:%M:%S")
as.POSIXlt(Sys.time())
as.POSIXlt(Sys.time())$mday
as.POSIXlt(Sys.time())$wday
True|False
TRUE|FALSE
TRUE||FALSE
c(TRUE,TRUE)||c(FALSE,FALSE)
c(TRUE,TRUE)|c(FALSE,FALSE)
as.POSIXlt(Sys.time())$mon
c(TRUE,TRUE)&c(FALSE,FALSE)
c(TRUE,TRUE)&&c(FALSE,FALSE)
data_selected <- subset(data, (Date_time$year == 107)&(Date_time$mon == 1)&((Date_time$mday == 1)|(Date_time$mday == 2)))
View(data_selected)
hist(data_selected$Global_active_power, xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red")
hist(as.numeric(data_selected$Global_active_power), xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red")
str(data_selected$Global_active_power)
as.numeric(data_selected$Global_active_power[1])
head(as.numeric(data_selected$Global_active_power))
head(as.numeric(as.character(data_selected$Global_active_power)))
hist(as.numeric(as.character(data_selected$Global_active_power)), xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red")
dev.off()
hist(as.numeric(as.character(data_selected$Global_active_power)), xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red")
title(main = "Global Active Power")
hist(as.numeric(as.character(data_selected$Global_active_power)), xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red", main = "Global Active Power")
data <- read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"), header = TRUE, sep = ";")
data$Date_time <- strptime(paste(data$Date,data$Time), format = "%d/%m/%Y %H:%M:%S")
data_selected <- subset(data, (Date_time$year == 107)&(Date_time$mon == 1)&((Date_time$mday == 1)|(Date_time$mday == 2)))
png("plot1.png")
hist(as.numeric(as.character(data_selected$Global_active_power)), xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red", main = "Global Active Power")
dev.off()
plot(data_selected$Date_time, data_selected$Global_active_power, ylab)
plot(data_selected$Date_time, data_selected$Global_active_power, ylab = "Global Active Power (kilowatts)")
plot(data_selected$Date_time, data_selected$Global_active_power, xlab = "", ylab = "Global Active Power (kilowatts)")
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_active_power)), xlab = "", ylab = "Global Active Power (kilowatts)")
?plot
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_active_power)), xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
data <- read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"), header = TRUE, sep = ";")
data$Date_time <- strptime(paste(data$Date,data$Time), format = "%d/%m/%Y %H:%M:%S")
data_selected <- subset(data, (Date_time$year == 107)&(Date_time$mon == 1)&((Date_time$mday == 1)|(Date_time$mday == 2)))
png("plot2.png")
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_active_power)), xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
dev.off()
?points
?legend
str(data_selected$Sub_metering_1)
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_1)), xlab = "", ylab = "Energy sub metering", type = "l")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_2)), type = "l", col = "red")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_3)), type = "l", col = "blue")
?plot
?legend
legend(x=length(data_selected$Date_time), y=max(c(as.numeric(as.character(data_selected$Sub_metering_1)), as.numeric(as.character(data_selected$Sub_metering_2))), as.numeric(as.character(data_selected$Sub_metering_3))), legend = c(Sub_metering_1, Sub_metering_2, Sub_metering_3), col = c("black","red","blue"))
legend(x=length(data_selected$Date_time), y=max(c(as.numeric(as.character(data_selected$Sub_metering_1)), as.numeric(as.character(data_selected$Sub_metering_2))), as.numeric(as.character(data_selected$Sub_metering_3))), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col = c("black","red","blue"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"))
?legend
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = par(c("black","red","blue")))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(1,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(0,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(2,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(3,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(4,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(5,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(6,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(7,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(8,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(9,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(10,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(11,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(12,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(13,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(14,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(15,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(16,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(20,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(25,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c(30,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), pch = c("l","l","l"))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = 1)
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1))
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.8)
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.5)
data <- read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"), header = TRUE, sep = ";")
data$Date_time <- strptime(paste(data$Date,data$Time), format = "%d/%m/%Y %H:%M:%S")
data_selected <- subset(data, (Date_time$year == 107)&(Date_time$mon == 1)&((Date_time$mday == 1)|(Date_time$mday == 2)))
png("plot3.png")
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_1)), xlab = "", ylab = "Energy sub metering", type = "l")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_2)), type = "l", col = "red")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_3)), type = "l", col = "blue")
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.5)
dev.off()
png("plot3.png")
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_1)), xlab = "", ylab = "Energy sub metering", type = "l")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_2)), type = "l", col = "red")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_3)), type = "l", col = "blue")
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.8)
dev.off()
par(mfcol=c(2,2))
hist(as.numeric(as.character(data_selected$Global_active_power)), xlab = "Global Active Power (kilowatts)", ylab = "Frequency", col = "red", main = "Global Active Power")
par(mfcol=c(2,2))
## topleft
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_active_power)), xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
## bottomleft
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_1)), xlab = "", ylab = "Energy sub metering", type = "l")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_2)), type = "l", col = "red")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_3)), type = "l", col = "blue")
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.8)
## topright
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Voltage)), xlab = "datetime", ylab = "Voltage", type = "l")
## bottomright
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_reactive_power)), xlab = "datetime", ylab = "Global_reactive_power")
par(mfcol=c(2,2))
## topleft
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_active_power)), xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
## bottomleft
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_1)), xlab = "", ylab = "Energy sub metering", type = "l")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_2)), type = "l", col = "red")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_3)), type = "l", col = "blue")
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.8)
## topright
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Voltage)), xlab = "datetime", ylab = "Voltage", type = "l")
## bottomright
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_reactive_power)), xlab = "datetime", ylab = "Global_reactive_power", type = "l")
data <- read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"), header = TRUE, sep = ";")
data$Date_time <- strptime(paste(data$Date,data$Time), format = "%d/%m/%Y %H:%M:%S")
data_selected <- subset(data, (Date_time$year == 107)&(Date_time$mon == 1)&((Date_time$mday == 1)|(Date_time$mday == 2)))
png("plot3.png")
par(mfcol=c(2,2))
## topleft
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_active_power)), xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
## bottomleft
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_1)), xlab = "", ylab = "Energy sub metering", type = "l")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_2)), type = "l", col = "red")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_3)), type = "l", col = "blue")
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.8)
## topright
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Voltage)), xlab = "datetime", ylab = "Voltage", type = "l")
## bottomright
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_reactive_power)), xlab = "datetime", ylab = "Global_reactive_power", type = "l")
dev.off()
data <- read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"), header = TRUE, sep = ";")
data$Date_time <- strptime(paste(data$Date,data$Time), format = "%d/%m/%Y %H:%M:%S")
data_selected <- subset(data, (Date_time$year == 107)&(Date_time$mon == 1)&((Date_time$mday == 1)|(Date_time$mday == 2)))
png("plot3.png")
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_1)), xlab = "", ylab = "Energy sub metering", type = "l")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_2)), type = "l", col = "red")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_3)), type = "l", col = "blue")
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.8)
dev.off()
data <- read.table(unz("exdata_data_household_power_consumption.zip","household_power_consumption.txt"), header = TRUE, sep = ";")
data$Date_time <- strptime(paste(data$Date,data$Time), format = "%d/%m/%Y %H:%M:%S")
data_selected <- subset(data, (Date_time$year == 107)&(Date_time$mon == 1)&((Date_time$mday == 1)|(Date_time$mday == 2)))
png("plot4.png")
par(mfcol=c(2,2))
## topleft
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_active_power)), xlab = "", ylab = "Global Active Power (kilowatts)", type = "l")
## bottomleft
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_1)), xlab = "", ylab = "Energy sub metering", type = "l")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_2)), type = "l", col = "red")
points(data_selected$Date_time, as.numeric(as.character(data_selected$Sub_metering_3)), type = "l", col = "blue")
legend("topright",legend = c("Sub_metering_1","Sub_metering_2","Sub_metering_3"), col = c("black","red","blue"), lty = c(1,1,1), cex = 0.8)
## topright
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Voltage)), xlab = "datetime", ylab = "Voltage", type = "l")
## bottomright
plot(data_selected$Date_time, as.numeric(as.character(data_selected$Global_reactive_power)), xlab = "datetime", ylab = "Global_reactive_power", type = "l")
dev.off()
